#!/usr/bin/env bash

# Requirements: ydotool, libinput.
 
# This script is based on the comments of the following post:
# www.reddit.com/r/swaywm/comments/ppx6xt/configuring_a_wacom_tablet_where_to_start/

ydotoold &

# List of event codes:
# /usr/include/linux/input-event-codes.h

# Some codes:
# space 57, w 17, z 44, comma 51, dot 52.
# b 48, n 49

# NOTE: the script  can configure the pressed, released  and stop (not
# being used currently ) state for more advanced configuration.

declare -A buttons
icode=17
icode2=48
buttons[0]="${icode2}:1 ${icode2}:0 ${icode}:1"   # b,w  -- brush then popup widget
buttons[20]="${icode}:0"
buttons[30]="${icode}:0"

icode=52
buttons[1]="${icode}:1"  # ,    -- Shortcut composer Pie Menu.
buttons[21]="${icode}:0"

icode=57
buttons[2]="${icode}:1 18:1 18:0 ${icode}:0" #space + e -- color history
buttons[22]="${icode}:0"

icode=51
buttons[3]="${icode}:1"  # .  -- Shortcut composer multiple assignment
buttons[23]="${icode}:0"


tabbind_loop()
{
    while IFS= read -r line; do
	# Button must be the button number, adjust cut's -f parameter if necessary.
	button=$(echo "$line" | cut -d ' ' -f 13)
	button_release=$(($button + 20));
	button_stop=$(($button + 30));
	pressed=$(echo "$line" | grep  "pressed")
	
	if [[ $pressed ]]; then
	    echo "pressed" ${buttons[$button]}
	    ydotool key ${buttons[$button]} 
        else
	    if [ -n "${buttons[$button_release]}" ]; then
		echo "release" ${buttons[$button_release]}
		echo "release button" $button_release
		ydotool key ${buttons[$button_release]} 
	    fi
        fi
    done
}


tabdev=$(libinput list-devices | grep -i -A1 " pad" | awk '/event[0-9]+$/{print $2}')

# Read input from tablet.
stdbuf -o0 libinput debug-events --device "$tabdev" | tabbind_loop

pkill ydotool
